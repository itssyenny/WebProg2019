{"version":3,"sources":["Components/create-todo.js","Components/todos-list.js","Components/edit-todo.js","App.js","serviceWorker.js","index.js"],"names":["CreateTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todo_name","todo_responsible","todo_type","todo_completed","todo_deleted","AssignTodo_Name","bind","assertThisInitialized","AssignTodo_Responsible","AssignTodo_Type","onSubmit_forNewTodoList","e","setState","target","value","preventDefault","newTodo","axios","post","then","res","console","log","data","react_default","a","createElement","style","marginTop","onSubmit","className","type","onChange","name","id","checked","Component","Todo","todo","react_router_dom","to","_id","TodosList","todos","_this2","get","response","catch","err","map","currentTodo","index","todos_list_Todo","key","todoList","EditTodo","onChangeTodoName","onChangeTodoResponsible","onChangeTodoType","onChangeTodoCompleted","onChangeTodoDeleted","match","params","history","push","align","htmlFor","App","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d795528b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class CreateTodo extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            todo_name: '',\n            todo_responsible: '',\n            todo_type:'',\n            todo_completed:false,\n            todo_deleted:false\n        }\n\n        this.AssignTodo_Name = this.AssignTodo_Name.bind(this);\n        this.AssignTodo_Responsible = this.AssignTodo_Responsible.bind(this);\n        this.AssignTodo_Type = this.AssignTodo_Type.bind(this);\n        this.onSubmit_forNewTodoList = this.onSubmit_forNewTodoList.bind(this);\n    }\n\n    AssignTodo_Name(e) {\n        this.setState({\n            todo_name: e.target.value\n        });\n    }\n\n    AssignTodo_Responsible(e) {\n        this.setState({\n            todo_responsible: e.target.value\n        });\n    }\n\n    AssignTodo_Type(e) {\n        this.setState({\n            todo_type: e.target.value\n        });\n    }\n\n    onSubmit_forNewTodoList(e) {\n        e.preventDefault();\n        // console.log('Form is submitted as follows:');\n        // console.log(`Todo Name: ${this.state.todo_name}`);\n        // console.log(`Todo Responsible: ${this.state.todo_responsible}`);\n        // console.log(`Todo Type: ${this.state.todo_type}`);\n\n        let newTodo = {\n            todo_name: this.state.todo_name,\n            todo_responsible: this.state.todo_responsible,\n            todo_type: this.state.todo_type,\n            todo_completed: this.state.todo_completed,\n            todo_deleted: this.state.todo_deleted\n        };\n\n        // axios send HTTP POST req to server endpoint\n        axios.post('http://localhost:8081/todos/add', newTodo).then(res => console.log(res.data));\n\n        this.setState({\n            todo_name: '',\n            todo_responsible: '',\n            todo_type:'',\n            todo_completed:false,\n            todo_deleted: false\n        });\n\n    }\n    render() {\n        return (\n           <div style={{marginTop: 10}}>\n                <h3>Create New Todo List</h3>\n                <form onSubmit={this.onSubmit_forNewTodoList}>\n                    <div className=\"form-group\">\n                        <label>Name: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_name}\n                                onChange={this.AssignTodo_Name}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_responsible}\n                                onChange={this.AssignTodo_Responsible}\n                        />\n                    </div>\n                    {/* foods or beverages */}\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\"\n                                    type=\"radio\"\n                                    name=\"typeOptions\"\n                                    id=\"foods\"\n                                    value=\"foods\"\n                                    checked={this.state.todo_type==='foods'}\n                                    onChange={this.AssignTodo_Type}\n                            />\n                            <label className=\"form-check-label\">foods</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\"\n                                    type=\"radio\"\n                                    name=\"typeOptions\"\n                                    id=\"beverages\"\n                                    value=\"beverages\"\n                                    checked={this.state.todo_type==='beverages'}\n                                    onChange={this.AssignTodo_Type}\n                            />\n                            <label className=\"form-check-label\">beverages</label>\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Create Todo List\" className=\"btn btn-primary\" />\n                    </div>\n                </form>\n           </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport '../index.css';\n\nconst Todo = props => (\n    <tr>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_name}</td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_responsible}</td>\n        <td className={props.todo.todo_completed ? 'completed' : ''}>{props.todo.todo_type}</td>\n        <td>\n            <Link to={\"/edit/\" + props.todo._id}>Edit</Link>\n        </td>\n    </tr>\n);\n\nexport default class TodosList extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {todos: []};\n        // this.TodoListData = this.TodoListData.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:8081/todos/')\n        .then(response => {\n            this.setState({ todos : response.data });\n        })\n        .catch(err => {\n            console.log(err);\n        });\n    }\n\n    // iterate through the array of todo lis items using map function\n    todoList() {\n        return this.state.todos.map(function(currentTodo, index){\n            return <Todo todo={currentTodo} key={index} />;\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Todo Lists</h3>\n                <table className=\"table table-striped\" style={{ marginTop: 20 }}>\n                <thead>\n                        <tr>\n                            <th>Description</th>\n                            <th>Responsible</th>\n                            <th>Priority</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.todoList() }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class EditTodo extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            todo_name: '',\n            todo_responsible: '',\n            todo_type:'',\n            todo_completed:false,\n            todo_deleted:false\n        }\n\n        //need to bind the function because we access the component's state (this.state) in the event handler method\n        this.onChangeTodoName = this.onChangeTodoName.bind(this);\n        this.onChangeTodoResponsible = this.onChangeTodoResponsible.bind(this);\n        this.onChangeTodoType = this.onChangeTodoType.bind(this);\n        this.onChangeTodoCompleted = this.onChangeTodoCompleted.bind(this);\n        this.onChangeTodoDeleted = this.onChangeTodoDeleted.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:8081/todos/' + this.props.match.params.id)\n        .then(response => {\n            this.setState({\n                todo_name: response.data.todo_name,\n                todo_responsible: response.data.todo_responsible,\n                todo_type: response.data.todo_type,\n                todo_completed: response.data.todo_completed,\n                todo_deleted: false\n            });\n        })\n        .catch(err => {\n            console.log(err);\n        });\n    }\n\n    onChangeTodoName(e) {\n        this.setState({todo_name: e.target.value});\n    }\n\n    onChangeTodoResponsible(e) {\n        this.setState({ todo_responsible: e.target.value });\n    }\n\n    onChangeTodoType(e) {\n        this.setState({ todo_type: e.target.value });\n    }\n\n    onChangeTodoCompleted(e) {\n        this.setState({ todo_completed: !(this.state.todo_completed) });\n    }\n\n    onChangeTodoDeleted() {\n        this.setState({ todo_deleted: true });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        let newTodo = {\n            todo_name: this.state.todo_name,\n            todo_responsible: this.state.todo_responsible,\n            todo_type: this.state.todo_type,\n            todo_completed: this.state.todo_completed,\n            todo_deleted: this.state.todo_deleted\n        };\n\n        console.log(newTodo);\n        axios.post('http://localhost:8081/todos/update/' + this.props.match.params.id, newTodo).then(res => console.log(res.data));\n\n        // redirect back to the user to the default route (homepage)\n        this.props.history.push('/');\n    }\n\n    render() {\n        return (\n            <div>\n                <h3 align=\"center\">Update Todo List</h3>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Name: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_name}\n                                onChange={this.onChangeTodoName}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Responsible: </label>\n                        <input  type=\"text\"\n                                className=\"form-control\"\n                                value={this.state.todo_responsible}\n                                onChange={this.onChangeTodoResponsible}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"typeOptions\" \n                                    id=\"foods\" \n                                    value=\"foods\"\n                                    checked={this.state.todo_type==='foods'} \n                                    onChange={this.onChangeTodoType}\n                                    />\n                            <label className=\"form-check-label\">foods</label>\n                        </div>\n                        <div className=\"form-check form-check-inline\">\n                            <input  className=\"form-check-input\" \n                                    type=\"radio\" \n                                    name=\"typeOptions\" \n                                    id=\"beverages\" \n                                    value=\"beverages\"\n                                    checked={this.state.todo_type==='beverages'} \n                                    onChange={this.onChangeTodoType}\n                                    />\n                            <label className=\"form-check-label\">beverages</label>\n                        </div>\n                    </div>\n                    <div className=\"form-check\">\n                        <input  className=\"form-check-input\"\n                                id=\"completedCheckbox\"\n                                type=\"checkbox\"\n                                name=\"completedCheckbox\"\n                                onChange={this.onChangeTodoCompleted}\n                                checked={this.state.todo_completed}\n                                value={this.state.todo_completed}\n                                />\n                        <label className=\"form-check-label\" htmlFor=\"completedCheckbox\">Completed</label>                        \n                    </div><br />\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Update\" className=\"btn btn-primary\" />\n\n                        {/* <span> &nbsp;</span> */}\n\n                        {/* <button className=\"btn btn-primary\" onClick={this.onChangeTodoDeleted.bind()}>Delete</button> */}\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport CreateTodo from './Components/create-todo';\nimport TodosList from './Components/todos-list';\nimport EditTodo from './Components/edit-todo';\n\n// import logo from \"./logo.png\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n        \n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/\" className=\"navbar-brand\">Todo App</Link>\n            \n            <div className=\"collpase navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Todos</Link>\n                </li>\n\n                <li className=\"navbar-item\">\n                  <Link to=\"/create\" className=\"nav-link\">Create Todo</Link>\n                </li>\n              </ul>\n            </div>\n        </nav>\n        <br />\n\n        <Route path=\"/\" exact component={TodosList} />\n        <Route path=\"/edit/:id\" component={EditTodo} />\n        <Route path=\"/create\" component={CreateTodo} />\n      </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}